<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.learning.course.dao.EvaluationDao">

    <resultMap type="com.learning.course.entity.Evaluation" id="EvaluationMap">
        <result property="id" column="id"/>
        <result property="score" column="score"/>
        <result property="comment" column="comment"/>
        <result property="courseId" column="course_id"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="courseName" column="course_name" javaType="String"/>
        <association property="author" javaType="com.learning.course.entity.User">
            <id property="id" column="uid"/>
            <result property="username" column="username"/>
            <result property="fullName" column="full_name"/>
            <result property="profilePicture" column="profile_picture"/>
        </association>
    </resultMap>

    <!--通过ID查询单个评价-->
    <select id="selectById" resultMap="EvaluationMap">
        select e.id,
               e.score,
               e.comment,
               e.user_name,
               e.course_id,
               e.create_time,
               e.update_time,
               u.id uid,
               u.username,
               u.full_name,
               u.profile_picture
        from evaluation e
                 join user u on u.username = e.user_name
        where e.id = #{id}
    </select>

    <!--查询所有评价 更新时间降序-->
    <select id="list" resultMap="EvaluationMap">
        select e.id,
               e.score,
               e.comment,
               e.user_name,
               e.course_id,
               e.create_time,
               e.update_time,
               u.id uid,
               u.username,
               u.full_name,
               u.profile_picture,
                c.name as course_name
        from evaluation e
                 join user u join learning.course c on e.course_id = c.id and u.username = e.user_name
        order by e.update_time desc
    </select>

    <!--通过课程ID查询所有评价-->
    <select id="listByCourseId" resultMap="EvaluationMap">
        select e.id,
               e.score,
               e.comment,
               e.user_name,
               e.course_id,
               e.create_time,
               e.update_time,
               u.id uid,
               u.username,
               u.full_name,
               u.profile_picture
        from evaluation e
                 join user u on u.username = e.user_name
        where e.course_id = #{courseId}
    </select>

    <!--插入单个评价-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into evaluation(score, comment, user_name, course_id, create_time, update_time)
        values (#{score}, #{comment}, #{author.username}, #{courseId}, #{createTime}, #{updateTime})
    </insert>

    <!--更新评价-->
    <update id="update">
        update evaluation
        set
        <if test="score != null">
            score = #{score},
        </if>
        <if test="comment != null and comment != ''">
            comment = #{comment},
        </if>
        update_time = #{updateTime}
        where id = #{id}
    </update>

    <!--删除评价-->
    <delete id="delete">
        delete
        from evaluation
        where id = #{id}
    </delete>

    <!--通过课程ID查询平均评分-->
    <select id="selectAverageScoreByCourseId" resultType="integer">
        SELECT floor(avg(score))
        from evaluation
        where course_id = #{courseId}
    </select>
    <select id="count" resultType="java.lang.Integer">
        select count(*)
    </select>
    <select id="statisticCountOf7Days" resultType="java.util.Map">
        SELECT
            DATE(update_time) AS evaluation_date, -- 提取日期部分，作为分组依据和返回的日期
            COUNT(*) AS count                     -- 统计每个分组（即每一天）的评价数量
        FROM
            evaluation                            -- 从评价表查询
        WHERE
            update_time >= CURDATE() - INTERVAL 7 DAY -- 筛选条件：创建时间大于等于7天前的日期（包含今天）
        GROUP BY
            evaluation_date                       -- 按提取出的日期进行分组
        ORDER BY
            evaluation_date;                      -- 按日期升序排序（可选，让结果更清晰）
    </select>

</mapper>